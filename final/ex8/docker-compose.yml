# first the version
version: "3"
# we define our services. The names of the services, especially the "db" matters for us. We set it as the name of the environment variable in the client service for the POSTGRES_HOST
# This allows node to find the host in the network of containers that is created by docker-compose
services:
  # â¤µ Very important name
  db:
    # we can give our container a name.
    # make sure to remove any other cointainer we already had
    # by that name
    # `docker rm some-postgres`
    # container_name: some-postgres
    # the image we use
    image: postgres
    # we set a env variable to define the password
    # username and default database are both "postgres"
    environment:
      POSTGRES_PASSWORD: mysecretpassword
    # We connect the ports from our host machine (aka laptop) to the ports in the container.
    # Postgres default port is 5432
    ports:
      - 5432:5432
  # Now comes our client service. Since we want some custom script to run we need to build the image by ourselves.
  client:
    # make sure that is only run after the db service is ready. This creates sometimes problems
    depends_on:
      - db
    # again give it a name
    container_name: ts-node-client
    # here we define some environment variables
    # they are available in node using process.env.VARIABLE_NAME
    environment:
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
    # here we start the custom build for our new image
    build:
      # we tell docker-compose where it should look for
      # our files. A realtive path
      context: ./client
      # This is actually redundant. If no dockerfile is defined it will fall back to Dockerfile. But you can name your file different. Take a look into that file in the folder ./client to see some more infos.
      dockerfile: Dockerfile
